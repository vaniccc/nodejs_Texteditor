<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/cssReset.css">
    <link rel="stylesheet" href="/styles/editorStyle.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <title>Text Editor</title>
</head>
<body>
    <main>
        <header id="header">
            
            <div class="dropdown">
                <button class="headerButton" id="fileHeaderButton">Datei</button>
            
                <div class="dropdownContent">
                    <button onclick="openFile()">Öffnen</button>
                    <button onclick="saveFile()">Speichern</button>
                    <button onclick="saveFileAs()">Speichern unter</button>
                    <button onclick="closeFile()">Schließen</button>
                </div>
            </div>

             <div class="dropdown">
                <button class="headerButton" id="tabHeaderButton">Tab</button>
            
                <div class="dropdownContent">
                    <button onclick="newTab()" id="newTab">Neuer Tab</button>
                    <button onclick="closeLastTab()">letzten Tab schließen</button>
                </div>
            </div>
        
            <div class="dropdown">
                <button class="headerButton" id="formatHeaderButton">Format</button>
            
                <div class="dropdownContent" id="formatDropdown">
                    <button id="lineBreakBtn" onclick="toggleLineBreak()">Zeilenumbruch <span class="checkmark" id="checkmark">✓</span></button>
                </div>
            </div>

            <div class="dropdown" >
                <button class="headerButton" id="viewHeaderButton">Ansicht</button>
            
                <div class="dropdownContent" id="viewDropdown">
                    <button onclick="themeSwitch()">Dark / White Mode</button>
                </div>
            </div>

            <div class="dropdown">
                <button class="headerButton" id="userHeaderButton">User</button>
            
                <div class="dropdownContent">
                    <p id="usernameDisplay"></p>
                    <button onclick="logoutUser()" id="userDropdown">Logout</button>
                </div>
            </div>

            <!-- <div class="displayFileName">
                <p class="fileNameClass" id="fileName"></p>
            </div> -->

        </header>
        
        <div class="tabBar" id="tabBar">
            <div class="tab" id="tab1">
                <button class="tabBtn" onclick="selectTab()" id="btn1">Neuer Tab 1</button>
                <button class="closeTabBtn" id="closeBtn1" onclick="closeTab()">x</button>
            </div>
        </div>

        <!-- Text Area -->
        <textarea id="editor">

        </textarea>
    </main>

    <script>

        // ######################################### File Functions ###################################
        
        let fileHandle = null;                                                                              

        async function openFile() {                                                                         
            try { 
                const openPickerOptions ={                                                                  
                    types: [{
                        description: "Textdateien",
                        accept: {" text/plain ": [".txt"] }
                    }]
                }

                const [handle] = await window.showOpenFilePicker(openPickerOptions);

                
                
                fileHandle = handle;
                const file = await handle.getFile();
                const text = await file.text();
                const title = await fileHandle.name;
                document.getElementById('editor').value = text;
                //document.getElementById('fileName').textContent = title;
                document.getElementById('btn1').textContent = title;
            } catch(e) {
                alert('OPEN FILE ERROR #01:: ' + e);
            }
        }

        async function saveFile() {
            try {
                if(!fileHandle) {
                    return saveFileAs();
                }
                const writable = await fileHandle.createWritable();
                await writable.write(document.getElementById('editor').value);
                await writable.close();
            } catch(e) {
                alert('SAVE FILE ERROR #01: ' + e);
            }
        }

        document.addEventListener("keydown", function (e) {
            if((e.ctrlKey || e.metaKey) && e.key === "s") {
                e.preventDefault();
                saveFile();
            }
        });

        async function saveFileAs() {
            try {
                const savePickerOptions = {
                    suggestedName: "newTextFile.txt",
                    types: [{
                        description: "Textdateien",
                        accept: { "text/plain ": [".txt"] }
                    }]
                }

                const handle = await window.showSaveFilePicker(savePickerOptions);

                fileHandle = handle;
                await saveFile();
                const title = await fileHandle.name;
                document.getElementById('tab1').textContent = title;
            } catch (e) {
                alert('DOWNLOAD FILE ERROR #01: ' + e);
            }
        }

        async function closeFile() {
            if(fileHandle) {
                if(confirm('Möchtest du die Datei wirklich schließen?\n \n Ungespeicherte Änderungen können verloren gehen.')){
                    fileHandle = null;
                    document.getElementById('editor').value = "";
                    document.getElementById('tab1').textContent = "Neuer Tab";
                }
            }
        }

        //################################## Format Functions ##########################################

        let isLineBreakOn = false;
        

        function toggleLineBreak() {
            isLineBreakOn = !isLineBreakOn;
            //console.log(autoLineBreak);

            var checkmark = document.getElementById('checkmark');
            checkmark.classList.toggle('checkmarkclicked'); 
        }

        document.getElementById('editor').addEventListener("focus", function (e) {
            var editor = document.getElementById('editor');
            if(isLineBreakOn === true) {
                editor.style.overflowWrap = "break-word";
                editor.style.whiteSpace = "normal";
            }

            if(isLineBreakOn === false) {
                editor.style.whiteSpace = "nowrap";
            }
        });

        
             
        //################################## View Functions ##########################################

        function themeSwitch() {
            var editor = document.getElementById('editor');
            editor.classList.toggle('textarea-dark-mode');

            var header = document.getElementById('header');
            header.classList.toggle('header-dark-mode');

            //Buttons
            var fileHeaderButton = document.getElementById('fileHeaderButton');
            fileHeaderButton.classList.toggle('headerButton-dark-mode');

            var viewHeaderButton = document.getElementById('viewHeaderButton');
            viewHeaderButton.classList.toggle('headerButton-dark-mode');

            var headerButton1 = document.getElementById('formatHeaderButton');
            headerButton1.classList.toggle('headerButton-dark-mode');

            var userHeaderButton = document.getElementById('userHeaderButton');
            userHeaderButton.classList.toggle('headerButton-dark-mode');
        }

        //############################# User Functions #############################################

        const usernameDisplay = document.getElementById('usernameDisplay');

        async function loadCurrentUser() {
            try {
                const res = await fetch('/users/user');

                if(!res.ok) {
                    window.location.href = '../';
                    return;
                }

                const data = await res.json();

                if(data && data.user) {
                    usernameDisplay.textContent = 'User: ' + data.user.username;
                }

            } catch (e) {
                console.error('LOAD USER ERROR #01: ' + e);
            }
        }

        async function logoutUser() {
            try {
                const res = await fetch('/users/logout', {                                          
                    method: 'POST'
                });

                const data = await res.json();

                if(data.success) {
                    window.location.href = "../";
                } else {
                    console.error('LOGOUT ERROR #02: ' + e);
                }
            } catch(e) {
                console.error('LOGOUT ERROR #01: ' + e);
            }
        }

        loadCurrentUser();

         //############################# Tab Functions #############################################

        let numberOfTabs = 1;

        function newTab() {
            try {
                
                if(numberOfTabs <= 8) {

                    numberOfTabs++;
                    const tabBar = document.getElementById('tabBar');

                    const newtab = document.createElement('div');
                    newtab.classList.add('tab');

                    var id = "tab" + numberOfTabs;

                    newtab.setAttribute("id", id);

                    tabBar.appendChild(newtab);


                    const newTabBtn = document.createElement('button');
                    newTabBtn.textContent = "Neuer Tab " + numberOfTabs;
                    newTabBtn.classList.add('tabBtn');
                    var btnId = "btn" + numberOfTabs;
                    newTabBtn.setAttribute("onclick", "selectTab(this)");
                    
                    newTabBtn.setAttribute("id", btnId);
                    newtab.appendChild(newTabBtn);


                    const newCloseTabBtn = document.createElement('button');
                    newCloseTabBtn.textContent = "x";
                    newCloseTabBtn.classList.add('closeTabBtn');
                    var closeBtnId = "closeBtn" + numberOfTabs;
                    newCloseTabBtn.setAttribute("onclick", "closeTab(this)");
                    newCloseTabBtn.setAttribute("id", closeBtnId);
                    newtab.appendChild(newCloseTabBtn);   
                }
            } catch(e) {
                console.error('NEW TAB ERROR #01: ' + e);
            }            
        }

        function selectTab(btn) {
            document.querySelectorAll(".tabBtn").forEach(b => b.classList.remove("active"));
            btn.classList.add("active");
            console.log(`${btn.textContent} ausgewählt`);
        }

        function closeLastTab() {
            try {
                const element = document.getElementById('tab' + numberOfTabs);

                element.remove();

                numberOfTabs--;

            } catch(e) {
                console.log('CLOSE LAST TAB ERROR #01: ' + e);
            }
        }

        function closeTab(closeBtn) {
            const tab = closeBtn.parentElement;
            tab.remove();
            renumberTabs();
        }

        function renumberTabs() {
            const tabs = document.querySelectorAll(".tab");
            tabs.forEach((tab, index) => {
                const tabBtn = tab.querySelector(".tabBtn");
                tabBtn.textContent = `Neuer Tab ${index + 1}`;
            });
            numberOfTabs = tabs.length;
        }


        // function closeSelectedTab() {

        //     const tab = closeBtn

        //     // const tabBar = document.getElementById('tabBar');

        //     // console.log(numberOfTabs);

        //     // document.getElementById('closeBtn1').onclick = function() {
        //     //     var element = document.getElementById('tab1');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn2').onclick = function() {
        //     //     var element = document.getElementById('tab2');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn3').onclick = function() {
        //     //     var element = document.getElementById('tab3');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn4').onclick = function() {
        //     //     var element = document.getElementById('tab4');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn5').onclick = function() {
        //     //     var element = document.getElementById('tab5');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn6').onclick = function() {
        //     //     var element = document.getElementById('tab6');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn7').onclick = function() {
        //     //     var element = document.getElementById('tab7');
        //     //     element.remove();

        //     //     numberOfTabs--;
        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn8').onclick = function() {
        //     //     var element = document.getElementById('tab8');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };

        //     //  document.getElementById('closeBtn9').onclick = function() {
        //     //     var element = document.getElementById('tab9');
        //     //     element.remove();

        //     //     numberOfTabs--;

        //     //     console.log(numberOfTabs);
        //     // };
        // }

        

        // function downloadFile() {
        //     try {
            
        //     const filename = prompt("Dateiname (mit .txt) eingeben:", "dokument.txt");
        //     if(!filename) 
        //         return;

        //     const link = document.createElement("a");
        //     link.download = filename;

        //     const blob = new Blob([content], { type: "text/plain" });
        //     link.href = URL.createObjectURL(blob);
        //     link.click();
        //     URL.revokeObjectURL(link.href);
        //     } catch(e) {
        //         alert('FILE DOWNLOAD ERROR #001: ' + e);
        //     }
        // }

        // function loadFile(event) {
        //     const file = event.target.files[0];
        //     if(!file) return;

        //     const reader = new FileReader();
        //     reader.onload = function (e) {
        //         document.getElementById('editor').value = e.target.result;
        //     };
        //     reader.readAsText(file);
        // }
    </script>
</body>
</html>